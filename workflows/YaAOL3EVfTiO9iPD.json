{
  "active": true,
  "connections": {
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI: 生成小红书文案",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI: 生成小红书文案": {
      "main": [
        [
          {
            "node": "AI:小红书内容分段专家",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI:小红书内容分段专家",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "AI:小红书内容分段专家",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI:小红书内容分段专家": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "手动触发器": {
      "main": [
        [
          {
            "node": "凭证配置器",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "远程触发器": {
      "main": [
        [
          {
            "node": "凭证配置器",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "记录分发器": {
      "main": [
        [
          {
            "node": "记录过滤器",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "AI: 生成小红书文案",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code: 格式化请求体": {
      "main": [
        [
          {
            "node": "提交生图任务",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "准备图片生成参数": {
      "main": [
        [
          {
            "node": "Code: 格式化请求体",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "查询任务": {
      "main": [
        [
          {
            "node": "错误检查",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "格式化查询任务参数": {
      "main": [
        [
          {
            "node": "等待生图",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "转换图片为文件格式",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "格式化查询任务参数",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "提交生图任务": {
      "main": [
        [
          {
            "node": "格式化查询任务参数",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "等待生图": {
      "main": [
        [
          {
            "node": "查询任务",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "错误检查": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI: 小红书图片设计专家",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI: 小红书图片设计专家",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI: 小红书图片设计专家": {
      "main": [
        [
          {
            "node": "准备图片生成参数",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "数据聚合器",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI: 小红书图片设计专家",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "凭证配置器": {
      "main": [
        [
          {
            "node": "表格解析器",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "表格解析器": {
      "main": [
        [
          {
            "node": "记录读取器",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "记录读取器": {
      "main": [
        [
          {
            "node": "记录分发器",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "记录过滤器": {
      "main": [
        [
          {
            "node": "状态锁定器",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "状态锁定器": {
      "main": [
        [
          {
            "node": "AI: 生成小红书文案",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "数据聚合器": {
      "main": [
        [
          {
            "node": "回写结果并标记完成",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "转换图片为文件格式": {
      "main": [
        [
          {
            "node": "上传封面图至飞书",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "上传封面图至飞书": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-13T11:36:24.474Z",
  "id": "YaAOL3EVfTiO9iPD",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "xiaoohongshu",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -896,
        1056
      ],
      "id": "1047d4c9-67bf-4ad7-a534-3f935257ac57",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "ecEdcti9RDOE1ozx",
          "name": "DeepSeek account"
        }
      }
    },
    {
      "parameters": {
        "content": "## 数据接入与准备模块\n**功能**:  负责触发工作流并从飞书多维表格中读取待处理的内容主题\n\n### 技术实现特点:\n- 双触发机制: 支持手动触发和Webhook远程触发，提高灵活性\n- 智能过滤: 自动识别\"待处理\"状态的记录，避免重复处理\n- 批量处理: 使用Split Out节点将多条记录分解为逐条处理\n",
        "height": 416,
        "width": 928
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1408,
        256
      ],
      "id": "e63324e1-ed9c-4017-8743-6904f46e8d45",
      "name": "解析表格URL"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# 角色：资深小红书内容创作者\n\n你是一位精通社交媒体传播、深谙小红书平台调性的内容创作专家。你的笔记总是能精准抓住用户眼球，获得大量点赞、收藏和评论。\n\n# 任务\n\n你的任务是根据用户提供的 **[主题]**，创作一篇完整的、具有爆款潜力的小红书图文笔记。\n\n# 创作要求与规则\n\n1.  **标题**：\n    *   必须引人注目，使用大量 Emoji 吸引眼球。\n    *   多采用“数字 + 关键词”、“提问式”、“揭秘式”或“保姆级教程”等爆款标题格式。\n    *   字数控制在 20 字以内。\n\n2.  **正文**：\n    *   **开篇**：第一句话必须能接住标题的钩子，迅速抓住读者兴趣。\n    *   **Emoji 运用**：全文必须大量、高频地使用 Emoji，用作段落分隔、重点突出和情绪表达，营造轻松活泼的氛围。\n    *   **结构化**：内容必须分点、分段阐述，逻辑清晰。多使用数字序号（❶、❷、❸）或小标题来引导阅读。\n    *   **价值导向**：内容必须对用户有实际帮助，提供干货、技巧、经验或避坑指南。\n    *   **语气**：使用亲切、真实的口吻，多用“姐妹们”、“家人们”、“我真的哭死”等网络热词，像在和好朋友分享秘密。\n    *   **结尾 CTA**：在文末必须有明确的号召性用语（Call to Action），引导用户进行互动，例如：“快@你的闺蜜一起来看”、“记得点赞收藏，不然就找不到了哦”、“评论区交作业”等。\n\n3.  **标签 (Hashtags)**：\n    *   在文末必须附上 5-10 个高度相关的标签。\n    *   标签组合应包括：核心关键词、品类大词、场景词和“#小红书爆款”或“#笔记灵感”等平台热门标签。\n\n\n# 输出格式要求\n**必须严格按照以下JSON格式输出，不要有任何多余的解释或说明，确保包含record_id：**\n\n```json\n{\n  \"record_id\": \"{{ $json.data.record.record_id }}\",\n  \"title\": \"你创作的标题\",\n  \"content\": \"[此处填写你创作的正文内容，包含所有 Emoji、分段和结尾 CTA]\",\n  \"hashtags\": \"#[主题关键词1] #[主题关键词2] #[主题关键词3] #小红书 #笔记灵感\",\n  \"full_output\": \"完整的小红书笔记内容（标题+分隔符+正文+分隔符+标签）\"\n}\n\n---\n\n# 开始创作\n\n现在，请根据以下主题进行创作：\n\n**主题：`{{ $('记录过滤器').item.json.fields['主题'][0].text }}`**\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -848,
        864
      ],
      "id": "599ea2de-83fb-4aa5-a52e-44dfd9d0c675",
      "name": "AI: 生成小红书文案"
    },
    {
      "parameters": {
        "content": "## 内容生成模块\n**功能定义**: 利用AI能力生成小红书文案并进行智能分段，为后续封面生成做准备\n\n### 技术实现特点:\n- 双层AI处理: 先生成完整文案，再智能分段优化展示\n- 结构化输出: 使用 JSON Schema 约束输出格式，确保数据一致性\n- DeepSeek集成: 采用高性价比的 DeepSeek 模型降低成本",
        "height": 480,
        "width": 1376,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1408,
        688
      ],
      "id": "4c11124a-4de0-43f4-ac5d-10b896b034c3",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## 结果整合模块\n\n**功能定义**: 汇总所有生成的内容和图片，更新飞书表格记录状态\n### 技术实现特点:\n- 数据聚合: 收集所有循环生成的图片token\n- 状态管理: 更新记录为\"已完成\"状态\n- 时间戳记录: 记录生成时间便于追踪",
        "height": 480,
        "width": 608,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        688
      ],
      "id": "9cfb6734-6383-494a-9d8e-52331c33c94e",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -448,
        1024
      ],
      "id": "701c9103-7151-4ca3-9d53-72e675577dfb",
      "name": "DeepSeek Chat Model2",
      "credentials": {
        "deepSeekApi": {
          "id": "ecEdcti9RDOE1ozx",
          "name": "DeepSeek account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"total_pages\": \"数字\",\n  \"pages\": [\n    {\n      \"page_number\": 1,\n      \"page_type\": \"封面页\",\n      \"title\": \"页面标题\",\n      \"content\": \"页面核心内容\",\n      \"record_id\": \"record id\",\n      \"word_count\": \"字数统计\"\n    },\n    {\n      \"page_number\": 2,\n      \"page_type\": \"内容页\", \n      \"title\": \"页面标题\",\n      \"content\": \"页面核心内容\",\n      \"record_id\": \"record id\",\n      \"word_count\": \"字数统计\"\n    }\n  ],\n  \"content_summary\": {\n    \"original_length\": \"原文字数\",\n    \"segmented_pages\": \"分段页数\", \n    \"main_theme\": \"主要主题\",\n    \"key_points\": [\"核心要点1\", \"核心要点2\", \"核心要点3\"]\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -224,
        1024
      ],
      "id": "6d655f67-457d-4fd9-8e3f-bb65f64f2a70",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.pages",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1408,
        1392
      ],
      "id": "ea7d62f0-50e2-417b-9755-1e5cfdc359eb",
      "name": "Split Out"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# 小红书内容分段专家\n\n## 角色定位\n专业的小红书内容策划师，擅长将长文案智能分段，精通小红书平台的阅读习惯和内容展示规律。\n\n## 核心任务\n根据用户提供的文案内容，按照小红书多图展示的特点进行合理分段，输出标准JSON格式。\n\n## 输入内容\n**用户原始文案：** {{ $json.output.content }}\n\n## 核心约束（不可违反）\n- **页数上限**：最多{{ $('凭证配置器').item.json.maxPages }}页，绝对不能超过\n- **强制要求**：无论内容多长，必须压缩到{{ $('凭证配置器').item.json.maxPages }}页内\n- 如内容过长无法合理分{{ $('凭证配置器').item.json.maxPages }}页，则优先保留核心要点\n\n## 分段规则\n\n### 1. 数量控制\n- 总页数控制在{{ $('凭证配置器').item.json.minPages }}-{{ $('凭证配置器').item.json.maxPages }}页之间（符合小红书图片限制）\n- 优先按内容逻辑自然分段，避免强制切割\n\n### 2. 页面类型规划\n- **封面页**：提炼核心主题，制造吸引力\n- **内容页**：逐点展开，每页一个核心观点\n- **总结页**：重点回顾，引导互动\n\n### 3. 内容密度控制\n- 每页文字控制在15-40字\n- 确保单页信息完整独立\n- 保持页面间逻辑连贯\n\n### 4. 分段优先级\n1. 按自然段落分割\n2. 按要点列表分割  \n3. 按逻辑层次分割\n4. 按字数均匀分割\n\n## 输出JSON结构\n\n```json\n{\n  \"total_pages\": \"必须≤{{ $('凭证配置器').item.json.maxPages }}\",\n  \"pages\": [\n    {\n      \"page_number\": 1,\n      \"page_type\": \"封面页\",\n      \"title\": \"页面标题\",\n      \"content\": \"页面核心内容\",\n      \"record_id\": \"{{ $json.output.record_id }}\",\n      \"word_count\": 字数统计\n    },\n    {\n      \"page_number\": 2,\n      \"page_type\": \"内容页\", \n      \"title\": \"页面标题\",\n      \"content\": \"页面核心内容\",\n      \"record_id\": \"{{ $json.output.record_id }}\",\n      \"word_count\": 字数统计\n    }\n  ],\n  \"content_summary\": {\n    \"original_length\": \"原文字数\",\n    \"segmented_pages\": \"分段页数\", \n    \"main_theme\": \"主要主题\",\n    \"key_points\": [\"核心要点1\", \"核心要点2\", \"核心要点3\"]\n  }\n}\n```\n\n## 分段策略\n\n### 封面页处理\n- 提取原文案的核心主题作为主标题\n- 选择最有吸引力的卖点作为副标题\n- 字数控制在20-30字\n\n### 内容页处理  \n- 按逻辑要点逐一展开\n- 每页围绕一个核心观点\n- 保持前后页面的逻辑递进关系\n- 字数控制在15-35字\n\n### 总结页处理\n- 提炼全文核心要点\n- 添加行动指引或互动引导\n- 字数控制在25-40字\n\n## 质量标准\n\n1. **完整性**：分段后覆盖原文案所有重要信息\n2. **独立性**：每页内容相对完整，可独立理解  \n3. **连贯性**：页面间逻辑清晰，过渡自然\n4. **适配性**：符合小红书移动端阅读习惯\n5. **可读性**：文字简洁明了，信息层次清晰\n\n## 输出要求\n- 生成完整可解析的JSON数据结构\n- 确保内容完整性，不遗漏重要信息\n- 保持原文案的核心观点和逻辑结构\n- 严格控制每页字数，适配图片展示需求",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -400,
        848
      ],
      "id": "d11972ed-9996-4ab4-b1a4-a3582dd96789",
      "name": "AI:小红书内容分段专家"
    },
    {
      "parameters": {
        "content": "## 封面设计模块\n**功能定义**: 为每个内容页面生成视觉化的封面设计方案\n### 技术实现特点:\n- 循环迭代处理: 使用Loop Over Items实现批量封面生成\n- 智能创意生成: AI分析内容后生成图片设计提示词\n- 结构化提取: 自动提取标题和绘画关键词",
        "height": 496,
        "width": 560,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1408,
        1200
      ],
      "id": "430da304-3a81-4558-9f8a-f3ff696707d0",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## 图像生成模块\n**功能定义**: 调用火山引擎视觉API，将设计方案转化为实际的封面图片\n### 技术实现特点:\n- 签名认证机制: 使用AWS Signature V4算法进行API认证\n- 高质量生成: 采用即梦文生图3.1模型\n",
        "height": 432,
        "width": 1184,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -816,
        1200
      ],
      "id": "e006b682-360a-473e-aad5-018f58a9242e",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## 数据存储模块\n**功能定义**: 将生成的图片上传到飞书，并更新表格记录\n### 技术实现特点:\n- 飞书云存储: 利用飞书的文件存储能力\n- 批量上传: 支持多张图片的连续上传\n- 等待机制: 确保上传完成后继续处理\n",
        "height": 496,
        "width": 464,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        384,
        1200
      ],
      "id": "2b84bda1-9481-461f-9b4f-8a1a7eb2c4b2",
      "name": "Sticky Note6"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1568,
        336
      ],
      "id": "a95de77e-7d7a-443f-8649-99765ecc90a0",
      "name": "手动触发器"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "29e59204-13b9-4034-b786-cb535a1ea2b1",
        "authentication": "headerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1568,
        528
      ],
      "id": "1ad7e6b1-d8e7-4193-b93a-54be6759c283",
      "name": "远程触发器",
      "webhookId": "29e59204-13b9-4034-b786-cb535a1ea2b1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "fV66DvlGTih3qETr",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1820007e-88a9-420e-bdcf-f3a44f1b3bc6",
              "name": "bitableURL",
              "value": "=https://ycntepjlahbu.feishu.cn/wiki/QQRwwSYnqitwNlkMMvScNt6enVf?table=tbldIzu23W15xJMA&view=vewKljSG6K",
              "type": "string"
            },
            {
              "id": "637b8213-f3ff-48fa-8c96-6365d6392c03",
              "name": "=accessKeyId",
              "value": "={{ $env.VOLCENGINE_ACCESS_KEY_ID }}",
              "type": "string"
            },
            {
              "id": "442c977e-5e68-4ad5-be43-7458157cb180",
              "name": "=secretAccessKey",
              "value": "={{ $env.VOLCENGINE_SECRET_ACCESS_KEY }}",
              "type": "string"
            },
            {
              "id": "f348e16f-5493-4716-a9ed-b1e16d33400a",
              "name": "minPages",
              "value": 1,
              "type": "number"
            },
            {
              "id": "4f6b157a-f2cc-4bee-bc71-311da1725446",
              "name": "maxPages",
              "value": 3,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1312,
        464
      ],
      "id": "0ae78741-8840-4a70-beec-f7fce44dbb13",
      "name": "凭证配置器"
    },
    {
      "parameters": {
        "resource": "bitable",
        "operation": "bitable:parseUrl",
        "url": "={{ $json.bitableURL }}"
      },
      "type": "n8n-nodes-feishu-lite.feishuNode",
      "typeVersion": 1,
      "position": [
        -1088,
        464
      ],
      "id": "c82afc90-4b52-4d16-bdf9-4f7324922e9f",
      "name": "表格解析器",
      "credentials": {
        "feishuCredentialsApi": {
          "id": "uyfehnr5LO8Gx1Ai",
          "name": "Feishu Credentials account"
        }
      }
    },
    {
      "parameters": {
        "resource": "bitable",
        "operation": "bitable:table:record:search",
        "app_toke": "={{ $('表格解析器').item.json.app_token }}",
        "table_id": "={{ $('表格解析器').item.json.table_id }}",
        "page_toke": "=",
        "body": "{\n   \"filter\":{\n      \"conjunction\":\"and\",\n      \"conditions\":[\n         {\n            \"field_name\":\"状态\",\n            \"operator\":\"doesNotContain\",\n            \"value\":[\n               \"生成中\",\"已完成\",\"失败\"\n            ]\n         }\n      ]\n   }\n}"
      },
      "type": "n8n-nodes-feishu-lite.feishuNode",
      "typeVersion": 1,
      "position": [
        -880,
        464
      ],
      "id": "10bc8319-9caa-4d48-85f4-5d5d59cc1dbe",
      "name": "记录读取器",
      "credentials": {
        "feishuCredentialsApi": {
          "id": "uyfehnr5LO8Gx1Ai",
          "name": "Feishu Credentials account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "data.items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -672,
        464
      ],
      "id": "ff151454-2592-4ec0-9030-58438456283b",
      "name": "记录分发器"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a7db5618-6cec-4474-94bb-a8d8c762ff34",
              "leftValue": "={{ $json.fields['主题'][0].text }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -1360,
        912
      ],
      "id": "84cd02c1-c34b-4904-9af9-38e83869274e",
      "name": "记录过滤器"
    },
    {
      "parameters": {
        "resource": "bitable",
        "operation": "bitable:table:record:update",
        "app_toke": "={{ $('表格解析器').item.json.app_token }}",
        "table_id": "={{ $('表格解析器').item.json.table_id }}",
        "record_id": "={{ $json.record_id }}",
        "body": "={\n  \"fields\":{\n    \"状态\": \"生成中\"\n  }\n} "
      },
      "type": "n8n-nodes-feishu-lite.feishuNode",
      "typeVersion": 1,
      "position": [
        -1088,
        912
      ],
      "id": "7e8b24e9-d9ce-4df6-b0af-bffc44ebe2f5",
      "name": "状态锁定器",
      "alwaysOutputData": false,
      "credentials": {
        "feishuCredentialsApi": {
          "id": "uyfehnr5LO8Gx1Ai",
          "name": "Feishu Credentials account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"record_id\": \"记录ID\",\n  \"title\": \"你创作的标题\",\n  \"content\": \"[此处填写你创作的正文内容，包含所有 Emoji、分段和结尾 CTA]\",\n  \"hashtags\": \"#[主题关键词1] #[主题关键词2] #[主题关键词3] #小红书 #笔记灵感\",\n  \"full_output\": \"完整的小红书笔记内容（标题+分隔符+正文+分隔符+标签）\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -672,
        1072
      ],
      "id": "6289af61-5276-4fcb-a07d-73eefca6d381",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data.binary_data_base64[0]",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        416,
        1408
      ],
      "id": "b148d8a1-c56a-41e0-8f23-bb3b7a730f8f",
      "name": "转换图片为文件格式"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# coding:utf-8\n\"\"\"\n基于你提供的Python代码改写的n8n版本\n\"\"\"\n\nimport json\nimport datetime\nimport hashlib\nimport hmac\n\n# 获取输入数据\ninput_data = items[0]['json']\n\n# 配置参数\nmethod = 'POST'\nhost = 'visual.volcengineapi.com'\nregion = input_data.get('region', 'cn-beijing')  # 你说的区域\nwidth = int(input_data.get('width', 512))\nheight = int(input_data.get('height', 683))\naction = input_data.get('action', 'CVSync2AsyncSubmitTask')\nversion= input_data.get('version', '2022-08-31')\nreqKey= input_data.get('reqKey', 'jimeng_t2i_v31')\nendpoint = 'https://visual.volcengineapi.com'\nservice = 'cv'\n\n# 从输入数据获取凭证\naccess_key = input_data.get('accessKeyId', 'your-ak')\nsecret_key = input_data.get('secretAccessKey', 'your-sk')\n\ndef sign(key, msg):\n    return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest()\n\ndef getSignatureKey(key, dateStamp, regionName, serviceName):\n    kDate = sign(key.encode('utf-8'), dateStamp)\n    kRegion = sign(kDate, regionName)\n    kService = sign(kRegion, serviceName)\n    kSigning = sign(kService, 'request')\n    return kSigning\n\ndef formatQuery(parameters):\n    request_parameters_init = ''\n    for key in sorted(parameters):\n        request_parameters_init += key + '=' + parameters[key] + '&'\n    request_parameters = request_parameters_init[:-1]\n    return request_parameters\n\ndef signV4Request(access_key, secret_key, service, req_query, req_body):\n    if access_key is None or secret_key is None:\n        return {'error': 'No access key is available.'}\n    \n    t = datetime.datetime.utcnow()\n    current_date = t.strftime('%Y%m%dT%H%M%SZ')\n    datestamp = t.strftime('%Y%m%d')  # Date w/o time, used in credential scope\n    \n    print(f\"=== 基本信息 ===\")\n    print(f\"Current Date: {current_date}\")\n    print(f\"Date Stamp: {datestamp}\")\n    print(f\"Region: {region}\")\n    print(f\"Service: {service}\")\n    print(f\"Method: {method}\")\n    print(f\"Host: {host}\")\n    print(f\"Access Key: {access_key[:10]}...\")  # 只显示前10位\n    print()\n    \n    canonical_uri = '/'\n    canonical_querystring = req_query\n    signed_headers = 'content-type;host;x-content-sha256;x-date'\n    payload_hash = hashlib.sha256(req_body.encode('utf-8')).hexdigest()\n    content_type = 'application/json'\n    \n    print(f\"=== 请求信息 ===\")\n    print(f\"Query String: {canonical_querystring}\")\n    print(f\"Body: {req_body}\")\n    print(f\"Body Bytes Length: {len(req_body.encode('utf-8'))}\")\n    print(f\"Payload Hash: {payload_hash}\")\n    print(f\"Content Type: {content_type}\")\n    print()\n    \n    canonical_headers = 'content-type:' + content_type + '\\n' + 'host:' + host + \\\n                       '\\n' + 'x-content-sha256:' + payload_hash + \\\n                       '\\n' + 'x-date:' + current_date + '\\n'\n    \n    print(f\"=== Canonical Headers ===\")\n    print(f\"Signed Headers: {signed_headers}\")\n    print(\"Canonical Headers:\")\n    print(repr(canonical_headers))\n    print()\n    \n    canonical_request = method + '\\n' + canonical_uri + '\\n' + canonical_querystring + \\\n                       '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + payload_hash\n    \n    print(\"=== Canonical Request ===\")\n    print(repr(canonical_request))  # 使用 repr 显示转义字符\n    print()\n    print(\"Canonical Request 原文:\")\n    print(canonical_request)\n    print()\n    \n    canonical_request_hash = hashlib.sha256(canonical_request.encode('utf-8')).hexdigest()\n    print(f\"=== Canonical Request Hash ===\")\n    print(canonical_request_hash)\n    print()\n    \n    algorithm = 'HMAC-SHA256'\n    credential_scope = datestamp + '/' + region + '/' + service + '/' + 'request'\n    string_to_sign = algorithm + '\\n' + current_date + '\\n' + credential_scope + '\\n' + canonical_request_hash\n    \n    print(\"=== String to Sign ===\")\n    print(f\"Algorithm: {algorithm}\")\n    print(f\"Current Date: {current_date}\")\n    print(f\"Credential Scope: {credential_scope}\")\n    print(f\"Canonical Request Hash: {canonical_request_hash}\")\n    print()\n    print(\"String to Sign 原文:\")\n    print(repr(string_to_sign))\n    print()\n    print(string_to_sign)\n    print()\n    \n    # 逐步显示签名key生成过程\n    print(\"=== 签名Key生成过程 ===\")\n    kDate = sign(secret_key.encode('utf-8'), datestamp)\n    print(f\"kDate (hex): {kDate.hex()}\")\n    \n    kRegion = sign(kDate, region)\n    print(f\"kRegion (hex): {kRegion.hex()}\")\n    \n    kService = sign(kRegion, service)\n    print(f\"kService (hex): {kService.hex()}\")\n    \n    kSigning = sign(kService, 'request')\n    print(f\"kSigning (hex): {kSigning.hex()}\")\n    print()\n    \n    signature = hmac.new(kSigning, (string_to_sign).encode('utf-8'), hashlib.sha256).hexdigest()\n    \n    print(f\"=== Final Signature ===\")\n    print(f\"Signature Length: {len(signature)}\")\n    print(f\"Signature: {signature}\")\n    print()\n    \n    authorization_header = algorithm + ' ' + 'Credential=' + access_key + '/' + \\\n                          credential_scope + ', ' + 'SignedHeaders=' + \\\n                          signed_headers + ', ' + 'Signature=' + signature\n    \n    print(f\"=== Authorization Header ===\")\n    print(authorization_header)\n    print()\n    \n    headers = {\n        'X-Date': current_date,\n        'Authorization': authorization_header,\n        'X-Content-Sha256': payload_hash,\n        'Content-Type': content_type\n    }\n    \n    request_url = endpoint + '?' + canonical_querystring\n    \n    return {\n        'headers': headers,\n        'url': request_url,\n        'body': req_body,\n        'debug': {\n            'canonical_request': canonical_request,\n            'string_to_sign': string_to_sign,\n            'signature': signature,\n            'authorization': authorization_header,\n            'payload_hash': payload_hash,\n            'current_date': current_date,\n            'credential_scope': credential_scope,\n            'region': region,\n            'service': service,\n            'canonical_request_hash': canonical_request_hash\n        }\n    }\n\n# 请求Query，根据你的需求调整\nquery_params = {\n    'Action': action,  # 你之前用的Action\n    'Version': version,  # 你之前用的Version\n}\nformatted_query = formatQuery(query_params)\n\n# 请求Body，使用你提供的正确参数\nbody_params = {\n    \"height\": height,\n    \"return_url\": False,\n    \"seed\": -1,\n    \"use_pre_llm\": False,\n    \"use_sr\": True,\n    \"width\": width,\n    \"prompt\": input_data.get('prompt', 'your-prompt'),\n    \"req_key\": reqKey\n}\nprint(f\"body_params: {body_params}\")\n# 确保JSON序列化不包含额外空格，与原始代码保持一致\nformatted_body = json.dumps(body_params, separators=(',', ':'), ensure_ascii=False)\n\n# 执行签名\nresult = signV4Request(access_key, secret_key, service, formatted_query, formatted_body)\n\n# 返回结果给 n8n\nreturn [{\"json\": result}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -640,
        1408
      ],
      "id": "2d4d0eb4-df0d-4b95-b532-4f696069fba4",
      "name": "Code: 格式化请求体"
    },
    {
      "parameters": {
        "resource": "space",
        "operation": "space:upload",
        "parent_type": "bitable_image",
        "parent_node": "={{ $('表格解析器').first().json.app_token }}",
        "fileFieldName": "data",
        "file_name": "={{ $('AI: 小红书图片设计专家').item.json.output.title }}.jpg"
      },
      "type": "n8n-nodes-feishu-lite.feishuNode",
      "typeVersion": 1,
      "position": [
        544,
        1408
      ],
      "id": "21a781f1-34eb-4574-90d2-c4cf2b4f43f3",
      "name": "上传封面图至飞书",
      "credentials": {
        "feishuCredentialsApi": {
          "id": "uyfehnr5LO8Gx1Ai",
          "name": "Feishu Credentials account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cdd33424-d48c-4bb0-85cf-f3d6b2d36257",
              "name": "prompt",
              "value": "={{ ($json.output.prompt) }}",
              "type": "string"
            },
            {
              "id": "6af00053-b097-42d3-998d-ec5fc3bd8bc1",
              "name": "accessKeyId",
              "value": "={{ $('凭证配置器').first().json.accessKeyId }}",
              "type": "string"
            },
            {
              "id": "cd6e2ed4-dd56-403b-8ea2-8d5f663ded74",
              "name": "secretAccessKey",
              "value": "={{ $('凭证配置器').first().json.secretAccessKey }}",
              "type": "string"
            },
            {
              "id": "ca99eada-db11-44da-a427-840b9d31effc",
              "name": "host",
              "value": "visual.volcengineapi.com",
              "type": "string"
            },
            {
              "id": "718c0a66-c78d-4947-bf05-9ef1f21cf267",
              "name": "serviceName",
              "value": "cv",
              "type": "string"
            },
            {
              "id": "2a0ad282-9f1f-4b9b-a78c-fb5b84ce7b7c",
              "name": "region",
              "value": "cn-beijing",
              "type": "string"
            },
            {
              "id": "2dcdd6c8-458b-4253-89e7-f59e64900aee",
              "name": "method",
              "value": "POST",
              "type": "string"
            },
            {
              "id": "34311ecd-963c-4395-81a6-5a065d6553f8",
              "name": "width",
              "value": 1104,
              "type": "number"
            },
            {
              "id": "66e1132c-3a9b-4970-a3e5-a159666378c3",
              "name": "height",
              "value": 1472,
              "type": "number"
            },
            {
              "id": "a3dcfda0-50ba-47b5-b490-31be841500eb",
              "name": "action",
              "value": "CVSync2AsyncSubmitTask",
              "type": "string"
            },
            {
              "id": "fba945d6-f6ff-406d-b560-927956f26a39",
              "name": "version",
              "value": "2022-08-31",
              "type": "string"
            },
            {
              "id": "a1dba3d9-b091-4c7c-9edc-ae9c14681180",
              "name": "reqKey",
              "value": "jimeng_t2i_v31",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -800,
        1408
      ],
      "id": "6e37bd9a-58f6-4ebc-9362-5736b1de6243",
      "name": "准备图片生成参数"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        704,
        1408
      ],
      "id": "3d1409f9-cb68-4add-b0d1-b7429d369d8f",
      "name": "Wait",
      "webhookId": "6d7ebba7-e1ef-434b-bfb5-4824d339aa9f"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://visual.volcengineapi.com",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "Action",
              "value": "=CVSync2AsyncGetResult"
            },
            {
              "name": "=Version",
              "value": "={{ $('准备图片生成参数').item.json.version }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $('格式化查询任务参数').item.json.headers.Authorization }}"
            },
            {
              "name": "Host",
              "value": "visual.volcengineapi.com"
            },
            {
              "name": "X-Content-Sha256",
              "value": "={{ $('格式化查询任务参数').item.json.headers['X-Content-Sha256'] }}"
            },
            {
              "name": "X-Date",
              "value": "={{ $('格式化查询任务参数').item.json.headers['X-Date'] }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"req_key\":\"{{ $('准备图片生成参数').item.json.reqKey }}\",\n  \"task_id\": \"{{ $('提交生图任务').item.json.data.task_id }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -48,
        1408
      ],
      "id": "480725dc-9d04-47a1-a383-adae540e63cb",
      "name": "查询任务",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# coding:utf-8\n\"\"\"\n基于你提供的Python代码改写的n8n版本\n\"\"\"\n\nimport json\nimport datetime\nimport hashlib\nimport hmac\n\n# 获取输入数据\ninput_data = _(\"准备图片生成参数\").first().json\n# 配置参数\nmethod = 'POST'\nhost = 'visual.volcengineapi.com'\nregion = input_data.get('region', 'cn-beijing')  # 你说的区域\naction = input_data.get('action', 'CVSync2AsyncSubmitTask')\nversion= input_data.get('version', '2022-08-31')\nreqKey= input_data.get('reqKey', 'jimeng_t2i_v31')\nendpoint = 'https://visual.volcengineapi.com'\nservice = 'cv'\n\n# 从输入数据获取凭证\naccess_key = input_data.get('accessKeyId', 'your-ak')\nsecret_key = input_data.get('secretAccessKey', 'your-sk')\n\ndef sign(key, msg):\n    return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest()\n\ndef getSignatureKey(key, dateStamp, regionName, serviceName):\n    kDate = sign(key.encode('utf-8'), dateStamp)\n    kRegion = sign(kDate, regionName)\n    kService = sign(kRegion, serviceName)\n    kSigning = sign(kService, 'request')\n    return kSigning\n\ndef formatQuery(parameters):\n    request_parameters_init = ''\n    for key in sorted(parameters):\n        request_parameters_init += key + '=' + parameters[key] + '&'\n    request_parameters = request_parameters_init[:-1]\n    return request_parameters\n\ndef signV4Request(access_key, secret_key, service, req_query, req_body):\n    if access_key is None or secret_key is None:\n        return {'error': 'No access key is available.'}\n    \n    t = datetime.datetime.utcnow()\n    current_date = t.strftime('%Y%m%dT%H%M%SZ')\n    datestamp = t.strftime('%Y%m%d')  # Date w/o time, used in credential scope\n    \n    print(f\"=== 基本信息 ===\")\n    print(f\"Current Date: {current_date}\")\n    print(f\"Date Stamp: {datestamp}\")\n    print(f\"Region: {region}\")\n    print(f\"Service: {service}\")\n    print(f\"Method: {method}\")\n    print(f\"Host: {host}\")\n    print(f\"Access Key: {access_key[:10]}...\")  # 只显示前10位\n    print()\n    \n    canonical_uri = '/'\n    canonical_querystring = req_query\n    signed_headers = 'content-type;host;x-content-sha256;x-date'\n    payload_hash = hashlib.sha256(req_body.encode('utf-8')).hexdigest()\n    content_type = 'application/json'\n    \n    print(f\"=== 请求信息 ===\")\n    print(f\"Query String: {canonical_querystring}\")\n    print(f\"Body: {req_body}\")\n    print(f\"Body Bytes Length: {len(req_body.encode('utf-8'))}\")\n    print(f\"Payload Hash: {payload_hash}\")\n    print(f\"Content Type: {content_type}\")\n    print()\n    \n    canonical_headers = 'content-type:' + content_type + '\\n' + 'host:' + host + \\\n                       '\\n' + 'x-content-sha256:' + payload_hash + \\\n                       '\\n' + 'x-date:' + current_date + '\\n'\n    \n    print(f\"=== Canonical Headers ===\")\n    print(f\"Signed Headers: {signed_headers}\")\n    print(\"Canonical Headers:\")\n    print(repr(canonical_headers))\n    print()\n    \n    canonical_request = method + '\\n' + canonical_uri + '\\n' + canonical_querystring + \\\n                       '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + payload_hash\n    \n    print(\"=== Canonical Request ===\")\n    print(repr(canonical_request))  # 使用 repr 显示转义字符\n    print()\n    print(\"Canonical Request 原文:\")\n    print(canonical_request)\n    print()\n    \n    canonical_request_hash = hashlib.sha256(canonical_request.encode('utf-8')).hexdigest()\n    print(f\"=== Canonical Request Hash ===\")\n    print(canonical_request_hash)\n    print()\n    \n    algorithm = 'HMAC-SHA256'\n    credential_scope = datestamp + '/' + region + '/' + service + '/' + 'request'\n    string_to_sign = algorithm + '\\n' + current_date + '\\n' + credential_scope + '\\n' + canonical_request_hash\n    \n    print(\"=== String to Sign ===\")\n    print(f\"Algorithm: {algorithm}\")\n    print(f\"Current Date: {current_date}\")\n    print(f\"Credential Scope: {credential_scope}\")\n    print(f\"Canonical Request Hash: {canonical_request_hash}\")\n    print()\n    print(\"String to Sign 原文:\")\n    print(repr(string_to_sign))\n    print()\n    print(string_to_sign)\n    print()\n    \n    # 逐步显示签名key生成过程\n    print(\"=== 签名Key生成过程 ===\")\n    kDate = sign(secret_key.encode('utf-8'), datestamp)\n    print(f\"kDate (hex): {kDate.hex()}\")\n    \n    kRegion = sign(kDate, region)\n    print(f\"kRegion (hex): {kRegion.hex()}\")\n    \n    kService = sign(kRegion, service)\n    print(f\"kService (hex): {kService.hex()}\")\n    \n    kSigning = sign(kService, 'request')\n    print(f\"kSigning (hex): {kSigning.hex()}\")\n    print()\n    \n    signature = hmac.new(kSigning, (string_to_sign).encode('utf-8'), hashlib.sha256).hexdigest()\n    \n    print(f\"=== Final Signature ===\")\n    print(f\"Signature Length: {len(signature)}\")\n    print(f\"Signature: {signature}\")\n    print()\n    \n    authorization_header = algorithm + ' ' + 'Credential=' + access_key + '/' + \\\n                          credential_scope + ', ' + 'SignedHeaders=' + \\\n                          signed_headers + ', ' + 'Signature=' + signature\n    \n    print(f\"=== Authorization Header ===\")\n    print(authorization_header)\n    print()\n    \n    headers = {\n        'X-Date': current_date,\n        'Authorization': authorization_header,\n        'X-Content-Sha256': payload_hash,\n        'Content-Type': content_type\n    }\n    \n    request_url = endpoint + '?' + canonical_querystring\n    \n    return {\n        'headers': headers,\n        'url': request_url,\n        'body': req_body,\n        'debug': {\n            'canonical_request': canonical_request,\n            'string_to_sign': string_to_sign,\n            'signature': signature,\n            'authorization': authorization_header,\n            'payload_hash': payload_hash,\n            'current_date': current_date,\n            'credential_scope': credential_scope,\n            'region': region,\n            'service': service,\n            'canonical_request_hash': canonical_request_hash\n        }\n    }\n\n# 请求Query，根据你的需求调整\nquery_params = {\n    'Action': 'CVSync2AsyncGetResult',  # 你之前用的Action\n    'Version': version,  # 你之前用的Version\n}\nformatted_query = formatQuery(query_params)\n\ntask_id = _(\"提交生图任务\").first().json.data.task_id\n# 请求Body，使用你提供的正确参数\nbody_params = {\n    \"req_key\": reqKey,\n    \"task_id\": task_id\n}\n# 确保JSON序列化不包含额外空格，与原始代码保持一致\nformatted_body = json.dumps(body_params, separators=(',', ':'), ensure_ascii=False)\n\n# 执行签名\nresult = signV4Request(access_key, secret_key, service, formatted_query, formatted_body)\n\n# 返回结果给 n8n\nreturn [{\"json\": result}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -336,
        1408
      ],
      "id": "10a7d64b-0d87-40d6-91d7-671248e7f33c",
      "name": "格式化查询任务参数",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ec0664c8-8142-45ac-9fbf-c0fa33cff3dc",
              "leftValue": "={{ $json.data.status }}",
              "rightValue": "done",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        256,
        1424
      ],
      "id": "586de910-da37-4561-89d6-a6465bd1839a",
      "name": "If"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://visual.volcengineapi.com",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "Action",
              "value": "={{ $('准备图片生成参数').item.json.action }}"
            },
            {
              "name": "Version",
              "value": "={{ $('准备图片生成参数').item.json.version }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $json.headers.Authorization }}"
            },
            {
              "name": "Host",
              "value": "visual.volcengineapi.com"
            },
            {
              "name": "X-Content-Sha256",
              "value": "={{ $json.headers['X-Content-Sha256'] }}"
            },
            {
              "name": "X-Date",
              "value": "={{ $json.headers['X-Date'] }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\"height\":{{ $('准备图片生成参数').item.json.height }},\"return_url\":false,\"seed\":-1,\"use_pre_llm\":false,\"use_sr\":true,\"width\":{{ $('准备图片生成参数').item.json.width }},\"prompt\":\"{{ $('准备图片生成参数').item.json.prompt }}\",\"req_key\":\"{{ $('准备图片生成参数').item.json.reqKey }}\"}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -496,
        1408
      ],
      "id": "89afd2e4-bc2d-4511-b22b-ef20ffd8f89a",
      "name": "提交生图任务",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -192,
        1408
      ],
      "id": "b2190ff0-de2c-48a9-8bfe-df059caeb9c5",
      "name": "等待生图",
      "webhookId": "2e725330-47d8-4c76-9f35-3e1490b16eb8"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "error-check-1",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "error-check-2",
              "leftValue": "={{ $json.error.message }}",
              "rightValue": "Risk Not",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        96,
        1408
      ],
      "id": "982baae1-5a81-4f39-8dc7-ab8e5b1c04be",
      "name": "错误检查"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -1168,
        1568
      ],
      "id": "64cbc725-72a8-43e9-a4b6-85c985f8ece7",
      "name": "DeepSeek Chat Model3",
      "credentials": {
        "deepSeekApi": {
          "id": "ecEdcti9RDOE1ozx",
          "name": "DeepSeek account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"【这里是提取或精炼后的核心标题】\",\n  \"prompt\": \"【这里是组合后的、完整的图像生成提示词】\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -960,
        1568
      ],
      "id": "c9b90a35-f3eb-4fbb-8bb2-1e030b9f154e",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# 角色：小红书视觉策略师\n\n## 核心定位\n你是一位顶尖的视觉策略师，专为小红书平台设计“信息美学”封面。你深知，一张成功的封面是**视觉吸引力**与**核心信息**的无缝融合。你的任务不是单纯创造图片，而是为内容设计一个既好看又能被快速理解的视觉入口。\n\n## 核心任务\n根据用户输入，构思一个**“场景+文字”**的视觉创意，并生成一段可以直接用于AI绘画的、生动具体的提示词。\n\n## 输入分析\n- **页面标题：** `{{ $json.title }}`\n- **页面内容：** `{{ $json.content }}`\n\n## 创作流程：三步构思法\n\n### 第一步：提炼核心文字\n1.  **[核心标题]**: 从用户标题中提炼出1-3个最关键的词，作为画面的主标题。\n2.  **[核心卖点]**: 从用户内容中提炼出不超过15字的核心价值点，作为副标题。\n\n### 第二步：构思融合场景\n基于提炼出的**[核心标题]**，构思一个与之相关的、富有故事感的视觉场景。**关键在于，这个场景要为文字的植入提供一个自然、合理的“舞台”。**\n\n### 第三步：生成融合提示词\n将构思好的**场景**与提炼出的**文字**组合成最终的提示词。\n\n---\n\n## **文字融合技巧 (核心规则)**\n你必须从以下技巧中选择一种，将**[核心标题]**和**[核心卖点]**植入画面：\n\n1.  **【直接标题法 - 优先使用】**\n    *   **描述方式**：在描述画面创意的同时，明确指定主副标题的位置、风格和内容。这是最常用且最高效的方式。\n    *   **应用范例**：`……海报风格，画面上方是醒目的主标题“威海旅游vlog”，下方是副标题“特种兵一日游”……`\n\n2.  **【场景元素法】**\n    *   **描述方式**：将文字作为场景的有机组成部分。\n    *   **应用范例**：`……一个女孩在翻看一本旅游杂志，杂志的封面标题就是“桂林全攻略”……` 或 `……背景是城市夜景，一个巨大的霓虹灯招牌上写着“搞钱思路”……`\n\n3.  **【拼贴标签法】**\n    *   **描述方式**：在拼贴画或信息图风格中，将文字设计成标签、便签或对话框。\n    *   **应用范例**：`……杂志拼贴画风格，一张拍立得照片旁边，有一个黄色的便签条，上面手写着“秋季穿搭公式”……`\n\n---\n\n## **提示词生成原则**\n\n- **信息清晰度是第一原则**：确保**[核心标题]**在画面中清晰、醒目、易于阅读。\n- **视觉与文字的融合**：追求场景与文字在风格、色彩和构图上的和谐统一，让文字看起来是“长”在画面里的，而不是“贴”上去的。\n- **使用感官词汇**：用具体的色彩（马卡龙色、莫兰迪色）、光影（丁达尔效应、过曝）、材质（金属光泽、毛绒质感）来丰富画面。\n- **风格描述限制**：严禁使用任何包含\"小红书\"的描述，改用\"社交媒体海报风格\"、\"时尚杂志封面风格\"、\"拼贴画风格\"等替代表达。\n\n## **黄金范例 (以此为标准)**\n- **输入标题**: `威海旅游vlog`\n- **输入内容**: `特种兵一日游，发现被低估的宝藏城市`\n- **理想输出**: `制作一张vlog视频封面，马卡龙配色，美女旅游照片+色块的拼贴画风格，画面主体是一个穿着短裙、梳双马尾的少女在海边奔跑，人物有白色描边。画面上方是醒目的主标题“威海旅游vlog”，下方是副标题“特种兵一日游，宝藏城市”，整体氛围清新治愈。`\n\n## 输出要求\n1.  **直接输出**：你的回答必须是**一段完整、连贯、无换行**的提示词文本。\n2.  **必须包含文字**：生成的提示词中**必须**包含从输入中提炼出的**[核心标题]**和**[核心卖点]**。\n3.  **无额外内容**：禁止使用Markdown、标题、序号或任何解释性文字。\n4. **中文引号规则**：提示词中包含的明确文字内容，必须用中文引号`“”`包起来，严禁使用英文引号\"\"。例如：正确写法是`“选购秘籍”`，错误写法是`\"选购秘籍\"`。\n5.  **技术规格**：在提示词的末尾，固定加入技术参数：`严禁出现任何品牌logo、水印、标签贴纸、角标文字、随机文字元素`\n6.  **严禁词汇**：生成的提示词中绝对不能出现\"小红书\"三个字，必须使用其他风格描述替代。\n7.  **记住**：你在生成提示词时，不要写\"小红书风格\"，改写为\"社交媒体风格\"或\"时尚海报风格\"。",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 5
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -1088,
        1408
      ],
      "id": "019a03b9-f19d-47d6-b12a-82d9a7905164",
      "name": "AI: 小红书图片设计专家"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1248,
        1392
      ],
      "id": "ab5a4cdd-d94f-41e9-bba2-42e3dc686447",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "jsCode": "// 获取图像生成结果和分页数据\nconst allChunks = $input.all();\nconst splitData = $('Split Out').all();\n\nconsole.log(\"图像生成结果数量:\", allChunks.length);\nconsole.log(\"分页数据数量:\", splitData.length);\nconsole.log(\"Split Out 详细数据:\", splitData);\n\n// 按record_id分组file_token - 修复关联逻辑\nconst groupedFileTokens = {};\n\nallChunks.forEach((item, index) => {\n  if (item.json && item.json.data && item.json.data.file_token) {\n    console.log(`处理第${index}项图像:`, {\n      file_token: item.json.data.file_token,\n      pairedItem: item.pairedItem\n    });\n    \n    // 直接使用索引关联（因为生成顺序应该和分页顺序一致）\n    if (splitData[index]) {\n      const recordId = splitData[index].json.record_id;\n      \n      console.log(`第${index}项关联结果: file_token -> record_id: ${recordId}`);\n      \n      if (!groupedFileTokens[recordId]) {\n        groupedFileTokens[recordId] = [];\n      }\n      \n      groupedFileTokens[recordId].push({\n        \"file_token\": item.json.data.file_token\n      });\n    } else {\n      console.log(`第${index}项没有对应的分页数据`);\n    }\n  }\n});\n\n// 验证分组结果\nObject.keys(groupedFileTokens).forEach(recordId => {\n  console.log(`Record ${recordId}: ${groupedFileTokens[recordId].length} 个file_token`);\n});\n\n// 获取文案数据\nconst contentData = {};\ntry {\n  const contentItems = $('AI: 生成小红书文案').all();\n  \n  contentItems.forEach(item => {\n    if (item.json && item.json.output && item.json.output.record_id) {\n      const recordId = item.json.output.record_id;\n      const content = item.json.output.full_output || item.json.output.content;\n      contentData[recordId] = content;\n      console.log(`文案匹配成功: ${recordId}`);\n    }\n  });\n} catch (e) {\n  console.log(\"获取文案数据失败:\", e);\n}\n\n// 获取标题数据\nconst titleData = {};\nsplitData.forEach(page => {\n  if (page.json.page_type === \"封面页\") {\n    titleData[page.json.record_id] = page.json.title;\n  }\n});\n\nconsole.log(\"最终分组结果:\", groupedFileTokens);\nconsole.log(\"文案数据keys:\", Object.keys(contentData));\nconsole.log(\"标题数据:\", titleData);\n\n// 组装成批量更新格式\nconst records = Object.keys(groupedFileTokens).map(recordId => {\n  return {\n    \"record_id\": recordId,\n    \"fields\": {\n      \"状态\": \"已完成\",\n      \"小红书标题\": titleData[recordId] || \"待补充标题\",\n      \"生成时间\": $now.toMillis(),\n      \"小红书封面\": groupedFileTokens[recordId],\n      \"小红书文案\": contentData[recordId] || \"待补充文案\"\n    }\n  };\n});\n\nconst finalResult = {\n  \"records\": records\n};\n\nconsole.log(\"最终批量更新结果:\", finalResult);\n\nreturn {\n  json: {\n    finalJsonPayload: JSON.stringify(finalResult)\n  }\n};"
      },
      "id": "cd2720ab-8dba-42bf-bb48-45ace14e56a3",
      "name": "数据聚合器",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        128,
        928
      ]
    },
    {
      "parameters": {
        "resource": "bitable",
        "operation": "bitable:table:record:batchUpdate",
        "app_toke": "={{ $('表格解析器').first().json.app_token }}",
        "table_id": "={{ $('表格解析器').first().json.table_id }}",
        "body": "={{ $json.finalJsonPayload }}"
      },
      "type": "n8n-nodes-feishu-lite.feishuNode",
      "typeVersion": 1,
      "position": [
        368,
        928
      ],
      "id": "d79f2cf7-b515-4dd0-b0d8-a269ea6f55e1",
      "name": "回写结果并标记完成",
      "credentials": {
        "feishuCredentialsApi": {
          "id": "uyfehnr5LO8Gx1Ai",
          "name": "Feishu Credentials account"
        }
      }
    },
    {
      "parameters": {
        "content": "## 🎨 飞书自动化生成小红书图文工作流\n#### [AI自动化场景实战课：让重复工作成为过去式](https://dcn0h1uoszk5.feishu.cn/wiki/C0i9wU5S4iPWIJkONKEcbNktnAd)\n\n📋 **基本信息**\n- 工作流名称：飞书自动化生成小红书图文  \n- 版本：v1.1.3  \n- 技术栈：N8N + DeepSeek + 火山引擎 + 飞书多维表格\n\n\n🎯 **功能概述**\n完整的小红书内容自动化生产线，从飞书多维表格读取主题，通过AI生成文案并智能分页，为每页内容设计专属封面图片，最终将生成的图文内容回写到飞书表格中。\n\n\n⚡ **核心特性**\n- **智能触发**：支持手动触发和Webhook远程触发\n- **AI驱动**：DeepSeek模型生成高质量小红书文案\n- **智能分页**：AI自动将长文案分解为适合展示的多页内容  \n- **视觉设计**：火山引擎API生成个性化封面图片\n- **自动化闭环**：从内容创作到文件管理全流程自动化\n\n\n🔄 **工作流程**\n1. **数据获取**：从飞书多维表格读取待处理主题\n2. **内容生成**：AI创作小红书风格文案\n3. **智能分页**：将文案分解为多页展示内容\n4. **图像设计**：为每页生成专属封面图片\n5. **文件管理**：上传图片到飞书并更新记录状态\n",
        "height": 592,
        "width": 1072,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -464,
        80
      ],
      "id": "6c4bd62d-2f92-4e3c-a481-0284c890e89a",
      "name": "Sticky Note3"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-23T13:52:19.000Z",
  "versionId": "c968b524-403d-46f7-ab10-14eaaa9da157"
}